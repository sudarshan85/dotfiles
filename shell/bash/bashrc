# If not running interactively, don't do anything
[ -z "$PS1" ] && return
#-------------------------------------------------------------
# Source global definitions (if any)
#-------------------------------------------------------------
if [ -f /etc/bashrc ]; then
      . /etc/bashrc   # --> Read /etc/bashrc, if present.
fi

source ~/.dotfiles/shell/defaults
source ~/.dotfiles/shell/aliases
source ~/.dotfiles/shell/colors
source ~/.dotfiles/shell/functions
source ~/.dotfiles/shell/prompt
source ~/.dotfiles/shell/exports

#-------------------------------------------------------------
# Greeting, motd etc. ...
#-------------------------------------------------------------

echo -e "${BCyan}This is BASH ${BRed}${BASH_VERSION%.*}${BCyan}\
- DISPLAY on ${BRed}$DISPLAY${NC}\n"
date
if [ -x /usr/games/fortune ]; then
    /usr/games/fortune -s     # Makes our day a bit more fun.... :-)
fi

function _exit()              # Function to run upon exit of shell.
{
    echo -e "${BRed}Bye!${NC}"
}
trap _exit EXIT

# # Test connection type:
# if [ -n "${SSH_CONNECTION}" ]; then
#     CNX=${Green}        # Connected on remote machine, via ssh (good).
# elif [[ "${DISPLAY%%:0*}" != "" ]]; then
#     CNX=${ALERT}        # Connected on remote machine, not via ssh (bad).
# else
#     CNX=${BCyan}        # Connected on local machine.
# fi
#
# # Test user type:
# if [[ ${USER} == "root" ]]; then
#     SU=${Red}           # User is root.
# #elif [[ ${USER} != $(logname) ]]; then
# #    SU=${BRed}          # User is not login user.
# else
#     SU=${BCyan}         # User is normal (well ... most of us are).
# fi

